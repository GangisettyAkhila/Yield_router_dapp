{
    "name": "YieldRouterContract",
    "structs": {},
    "methods": [
        {
            "name": "stake",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                },
                {
                    "type": "address",
                    "name": "contract_address"
                },
                {
                    "type": "address",
                    "name": "for_account"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "timestamp"
                },
                {
                    "type": "string",
                    "name": "platform"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unstake",
            "args": [
                {
                    "type": "address",
                    "name": "for_account"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                },
                {
                    "type": "uint64",
                    "name": "timestamp"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_platform_apy",
            "args": [
                {
                    "type": "string",
                    "name": "platform"
                },
                {
                    "type": "uint64",
                    "name": "apy"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_user_tracking",
            "args": [
                {
                    "type": "address",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,string,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculate_rewards",
            "args": [
                {
                    "type": "address",
                    "name": "for_account"
                },
                {
                    "type": "uint64",
                    "name": "current_time"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_recommended_platform",
            "args": [
                {
                    "type": "address",
                    "name": "for_account"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 3,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "platform_list": {
                    "keyType": "AVMString",
                    "valueType": "(string,string,string,string)",
                    "key": "cGxhdGZvcm1fbGlzdA=="
                }
            },
            "local": {
                "staked_amount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3Rha2VkX2FtdA=="
                },
                "staking_timestamp": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3Rha2VfdGltZQ=="
                },
                "last_platform": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "cGxhdGZvcm0="
                },
                "total_stake_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3Rha2VfY291bnQ="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "platform_apys": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "prefix": "YXB5Xw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        374
                    ],
                    "errorMessage": "Cannot unstake more than currently staked"
                },
                {
                    "pc": [
                        142
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        203
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        280
                    ],
                    "errorMessage": "Payment amount must match stake amount"
                },
                {
                    "pc": [
                        272
                    ],
                    "errorMessage": "Payment must go to contract"
                },
                {
                    "pc": [
                        283
                    ],
                    "errorMessage": "Staking amount must be greater than zero"
                },
                {
                    "pc": [
                        359
                    ],
                    "errorMessage": "Unstaking amount must be greater than zero"
                },
                {
                    "pc": [
                        612
                    ],
                    "errorMessage": "check self.platform_list exists"
                },
                {
                    "pc": [
                        261,
                        402
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        237,
                        246,
                        346,
                        355,
                        413,
                        521
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        221,
                        229,
                        338,
                        432,
                        513,
                        598
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                },
                {
                    "pc": [
                        213
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEgCCYICnN0YWtlZF9hbXQACnN0YWtlX3RpbWUIcGxhdGZvcm0Lc3Rha2VfY291bnQEYXB5XwQVH3x1DXBsYXRmb3JtX2xpc3QxGEAANCcHgC8ACAAPABgAIQAFQWxnbzUAB1RpbnltYW4AB01lc3NpbmEADEZvbGtzRmluYW5jZWcxG0EAOTEZFEQxGESCBgQGQv+QBF6yWd4Em+NTNQT566KLBLx22bsEXNQckzYaAI4GAAkAiADCAOYBNgGKADEZFDEYFBBDMRYjCUk4ECMSRDYaAUkVJBJENhoCSRUkEkQ2GgNJFSUSRBc2GgRJFSUSRBc2GgVJIlmBAghLARUSRFcCAEsFOAdPBRJETwQ4CEsDEkRLAkRLAyIoYyJOAk1PAwhLAyhPAmZLAipPA2ZLAStPAmZJIicEYyJOAk0jCCcETGYjQzYaAUkVJBJENhoCSRUlEkQXNhoDSRUlEkQXSwFESwIiKGMiTgJNSwJLAQ5ETwIJSwIoTwJmKkxmI0M2GgFJIlmBAghLARUSRFcCADYaAkkVJRJEFycFTwJQTBa/I0M2GgFJFSQSREkiKGMiTgJNSwEiKmMiTgJNSwIiK2MpTgJNTwMiJwRjIk4CTU8DFk8DFlBLAhUWVwYCTwNQTIACABpQTwIWUExQJwZMULAjQzYaAUcCFSQSRDYaAkkVJRJEF0wiKmMiTgJNSUAACSIWJwZMULAjQ0oJSwNJIihjIk4CTUwiK2MpTgJNJwVMUL5MFyJMTwJNCwuBgPCu55YJCkL/yyk2GgFHAhUkEkQiK2MpTgJNKSJJJwdlREkiWUsBgQJZSwJPAksCUlcCAE4CSwGBBFlLAk8CSwJSVwIATgJLAYEGWUsCTwJLAlJXAgBOAksBFVJXAgAiJwVLBUlOAlC+TBciTE8CTUxLCRJAAF1FCksIIicEYyJOAk2BCgtLCghJRQtLBg1BAAhLBEUHSwlFBkmNAwAnABwAEUsGSRUWVwYCTFAnBkxQsCNDgQNFAUsBRQVC/6GBAkUBSwJFBUL/liNFAUsDRQVC/4yBAgpFCkL/nQ==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}