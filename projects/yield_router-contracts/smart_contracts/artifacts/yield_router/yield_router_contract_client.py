# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment"}, {"type": "address", "name": "contract_address"}, {"type": "address", "name": "for_account"}, {"type": "uint64", "name": "amount"}, {"type": "uint64", "name": "timestamp"}, {"type": "string", "name": "platform"}], "name": "stake", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "for_account"}, {"type": "uint64", "name": "amount"}, {"type": "uint64", "name": "timestamp"}], "name": "unstake", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "platform"}, {"type": "uint64", "name": "apy"}], "name": "update_platform_apy", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "for_account"}], "name": "get_user_tracking", "returns": {"type": "(uint64,uint64,string,uint64)"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "for_account"}, {"type": "uint64", "name": "current_time"}], "name": "calculate_rewards", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "for_account"}], "name": "get_recommended_platform", "returns": {"type": "string"}, "events": [], "readonly": false, "recommendations": {}}], "name": "YieldRouterContract", "state": {"keys": {"box": {}, "global": {"platform_list": {"key": "cGxhdGZvcm1fbGlzdA==", "keyType": "AVMString", "valueType": "(string,string,string,string)"}}, "local": {"staked_amount": {"key": "c3Rha2VkX2FtdA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "staking_timestamp": {"key": "c3Rha2VfdGltZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "last_platform": {"key": "cGxhdGZvcm0=", "keyType": "AVMString", "valueType": "AVMString"}, "total_stake_count": {"key": "c3Rha2VfY291bnQ=", "keyType": "AVMString", "valueType": "AVMUint64"}}}, "maps": {"box": {"platform_apys": {"keyType": "AVMString", "valueType": "uint64", "prefix": "YXB5Xw=="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 0}, "local": {"bytes": 1, "ints": 3}}}, "structs": {}, "byteCode": {"approval": "CyAEAAEgCCYICnN0YWtlZF9hbXQACnN0YWtlX3RpbWUIcGxhdGZvcm0Lc3Rha2VfY291bnQEYXB5XwQVH3x1DXBsYXRmb3JtX2xpc3QxGEAANCcHgC8ACAAPABgAIQAFQWxnbzUAB1RpbnltYW4AB01lc3NpbmEADEZvbGtzRmluYW5jZWcxG0EAOTEZFEQxGESCBgQGQv+QBF6yWd4Em+NTNQT566KLBLx22bsEXNQckzYaAI4GAAkAiADCAOYBNgGKADEZFDEYFBBDMRYjCUk4ECMSRDYaAUkVJBJENhoCSRUkEkQ2GgNJFSUSRBc2GgRJFSUSRBc2GgVJIlmBAghLARUSRFcCAEsFOAdPBRJETwQ4CEsDEkRLAkRLAyIoYyJOAk1PAwhLAyhPAmZLAipPA2ZLAStPAmZJIicEYyJOAk0jCCcETGYjQzYaAUkVJBJENhoCSRUlEkQXNhoDSRUlEkQXSwFESwIiKGMiTgJNSwJLAQ5ETwIJSwIoTwJmKkxmI0M2GgFJIlmBAghLARUSRFcCADYaAkkVJRJEFycFTwJQTBa/I0M2GgFJFSQSREkiKGMiTgJNSwEiKmMiTgJNSwIiK2MpTgJNTwMiJwRjIk4CTU8DFk8DFlBLAhUWVwYCTwNQTIACABpQTwIWUExQJwZMULAjQzYaAUcCFSQSRDYaAkkVJRJEF0wiKmMiTgJNSUAACSIWJwZMULAjQ0oJSwNJIihjIk4CTUwiK2MpTgJNJwVMUL5MFyJMTwJNCwuBgPCu55YJCkL/yyk2GgFHAhUkEkQiK2MpTgJNKSJJJwdlREkiWUsBgQJZSwJPAksCUlcCAE4CSwGBBFlLAk8CSwJSVwIATgJLAYEGWUsCTwJLAlJXAgBOAksBFVJXAgAiJwVLBUlOAlC+TBciTE8CTUxLCRJAAF1FCksIIicEYyJOAk2BCgtLCghJRQtLBg1BAAhLBEUHSwlFBkmNAwAnABwAEUsGSRUWVwYCTFAnBkxQsCNDgQNFAUsBRQVC/6GBAkUBSwJFBUL/liNFAUsDRQVC/4yBAgpFCkL/nQ==", "clear": "C4EBQw=="}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [374], "errorMessage": "Cannot unstake more than currently staked"}, {"pc": [142], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [203], "errorMessage": "OnCompletion must be NoOp && can only call when creating"}, {"pc": [280], "errorMessage": "Payment amount must match stake amount"}, {"pc": [272], "errorMessage": "Payment must go to contract"}, {"pc": [283], "errorMessage": "Staking amount must be greater than zero"}, {"pc": [359], "errorMessage": "Unstaking amount must be greater than zero"}, {"pc": [612], "errorMessage": "check self.platform_list exists"}, {"pc": [261, 402], "errorMessage": "invalid number of bytes for (len+utf8[])"}, {"pc": [237, 246, 346, 355, 413, 521], "errorMessage": "invalid number of bytes for uint64"}, {"pc": [221, 229, 338, 432, 513, 598], "errorMessage": "invalid number of bytes for uint8[32]"}, {"pc": [213], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class StakeArgs:
    """Dataclass for stake arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument
    contract_address: str
    for_account: str
    amount: int
    timestamp: int
    platform: str

    @property
    def abi_method_signature(self) -> str:
        return "stake(pay,address,address,uint64,uint64,string)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UnstakeArgs:
    """Dataclass for unstake arguments"""
    for_account: str
    amount: int
    timestamp: int

    @property
    def abi_method_signature(self) -> str:
        return "unstake(address,uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdatePlatformApyArgs:
    """Dataclass for update_platform_apy arguments"""
    platform: str
    apy: int

    @property
    def abi_method_signature(self) -> str:
        return "update_platform_apy(string,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetUserTrackingArgs:
    """Dataclass for get_user_tracking arguments"""
    for_account: str

    @property
    def abi_method_signature(self) -> str:
        return "get_user_tracking(address)(uint64,uint64,string,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CalculateRewardsArgs:
    """Dataclass for calculate_rewards arguments"""
    for_account: str
    current_time: int

    @property
    def abi_method_signature(self) -> str:
        return "calculate_rewards(address,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetRecommendedPlatformArgs:
    """Dataclass for get_recommended_platform arguments"""
    for_account: str

    @property
    def abi_method_signature(self) -> str:
        return "get_recommended_platform(address)string"


class YieldRouterContractParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, str, int, int, str] | StakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stake(pay,address,address,uint64,uint64,string)void",
            "args": method_args,
        }))

    def unstake(
        self,
        args: tuple[str, int, int] | UnstakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unstake(address,uint64,uint64)void",
            "args": method_args,
        }))

    def update_platform_apy(
        self,
        args: tuple[str, int] | UpdatePlatformApyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_platform_apy(string,uint64)void",
            "args": method_args,
        }))

    def get_user_tracking(
        self,
        args: tuple[str] | GetUserTrackingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_tracking(address)(uint64,uint64,string,uint64)",
            "args": method_args,
        }))

    def calculate_rewards(
        self,
        args: tuple[str, int] | CalculateRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_rewards(address,uint64)uint64",
            "args": method_args,
        }))

    def get_recommended_platform(
        self,
        args: tuple[str] | GetRecommendedPlatformArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_recommended_platform(address)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class YieldRouterContractCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, str, int, int, str] | StakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stake(pay,address,address,uint64,uint64,string)void",
            "args": method_args,
        }))

    def unstake(
        self,
        args: tuple[str, int, int] | UnstakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unstake(address,uint64,uint64)void",
            "args": method_args,
        }))

    def update_platform_apy(
        self,
        args: tuple[str, int] | UpdatePlatformApyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_platform_apy(string,uint64)void",
            "args": method_args,
        }))

    def get_user_tracking(
        self,
        args: tuple[str] | GetUserTrackingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_tracking(address)(uint64,uint64,string,uint64)",
            "args": method_args,
        }))

    def calculate_rewards(
        self,
        args: tuple[str, int] | CalculateRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_rewards(address,uint64)uint64",
            "args": method_args,
        }))

    def get_recommended_platform(
        self,
        args: tuple[str] | GetRecommendedPlatformArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_recommended_platform(address)string",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class YieldRouterContractSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, str, int, int, str] | StakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stake(pay,address,address,uint64,uint64,string)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def unstake(
        self,
        args: tuple[str, int, int] | UnstakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "unstake(address,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def update_platform_apy(
        self,
        args: tuple[str, int] | UpdatePlatformApyArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_platform_apy(string,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_user_tracking(
        self,
        args: tuple[str] | GetUserTrackingArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int, str, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_tracking(address)(uint64,uint64,string,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int, str, int]], parsed_response)

    def calculate_rewards(
        self,
        args: tuple[str, int] | CalculateRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "calculate_rewards(address,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_recommended_platform(
        self,
        args: tuple[str] | GetRecommendedPlatformArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_recommended_platform(address)string",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[str], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    platform_list: tuple[str, str, str, str]

class LocalStateValue(typing.TypedDict):
    """Shape of local_state state key values"""
    staked_amount: int
    staking_timestamp: int
    last_platform: str
    total_stake_count: int

class YieldRouterContractState:
    """Methods to access state for the current YieldRouterContract app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    def local_state(
        self, address: str
    ) -> "_LocalState":
            """Methods to access local_state for the current app"""
            return _LocalState(self.app_client, address)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def platform_list(self) -> tuple[str, str, str, str]:
        """Get the current value of the platform_list key in global_state state"""
        value = self.app_client.state.global_state.get_value("platform_list")
        if isinstance(value, dict) and "(string,string,string,string)" in self._struct_classes:
            return _init_dataclass(self._struct_classes["(string,string,string,string)"], value)  # type: ignore
        return typing.cast(tuple[str, str, str, str], value)

class _LocalState:
    def __init__(self, app_client: algokit_utils.AppClient, address: str):
        self.app_client = app_client
        self.address = address
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> LocalStateValue:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        if not result:
            return typing.cast(LocalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.local_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(LocalStateValue, converted)

    @property
    def staked_amount(self) -> int:
        """Get the current value of the staked_amount key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("staked_amount")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def staking_timestamp(self) -> int:
        """Get the current value of the staking_timestamp key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("staking_timestamp")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def last_platform(self) -> str:
        """Get the current value of the last_platform key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("last_platform")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def total_stake_count(self) -> int:
        """Get the current value of the total_stake_count key in local_state state"""
        value = self.app_client.state.local_state(self.address).get_value("total_stake_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def platform_apys(self) -> "_MapState[str, int]":
        """Get values from the platform_apys map in box state"""
        return _MapState(
            self.app_client.state.box,
            "platform_apys",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class YieldRouterContractClient:
    """Client for interacting with YieldRouterContract smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = YieldRouterContractParams(self.app_client)
        self.create_transaction = YieldRouterContractCreateTransactionParams(self.app_client)
        self.send = YieldRouterContractSend(self.app_client)
        self.state = YieldRouterContractState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "YieldRouterContractClient":
        return YieldRouterContractClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "YieldRouterContractClient":
        return YieldRouterContractClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "YieldRouterContractClient":
        return YieldRouterContractClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "YieldRouterContractComposer":
        return YieldRouterContractComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["stake(pay,address,address,uint64,uint64,string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["unstake(address,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_platform_apy(string,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_user_tracking(address)(uint64,uint64,string,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int, str, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["calculate_rewards(address,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_recommended_platform(address)string"],
        return_value: algokit_utils.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | str | tuple[int, int, str, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class YieldRouterContractBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating YieldRouterContract contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class YieldRouterContractFactory(algokit_utils.TypedAppFactoryProtocol[YieldRouterContractBareCallCreateParams, None, None]):
    """Factory for deploying and managing YieldRouterContractClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = YieldRouterContractFactoryParams(self.app_factory)
        self.create_transaction = YieldRouterContractFactoryCreateTransaction(self.app_factory)
        self.send = YieldRouterContractFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: YieldRouterContractBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[YieldRouterContractClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return YieldRouterContractClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> YieldRouterContractClient:
        """Get an app client by creator address and name"""
        return YieldRouterContractClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> YieldRouterContractClient:
        """Get an app client by app ID"""
        return YieldRouterContractClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class YieldRouterContractFactoryParams:
    """Parameters for creating transactions for YieldRouterContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = YieldRouterContractFactoryCreateParams(app_factory)
        self.update = YieldRouterContractFactoryUpdateParams(app_factory)
        self.delete = YieldRouterContractFactoryDeleteParams(app_factory)

class YieldRouterContractFactoryCreateParams:
    """Parameters for 'create' operations of YieldRouterContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, str, int, int, str] | StakeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the stake(pay,address,address,uint64,uint64,string)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "stake(pay,address,address,uint64,uint64,string)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def unstake(
        self,
        args: tuple[str, int, int] | UnstakeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the unstake(address,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "unstake(address,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_platform_apy(
        self,
        args: tuple[str, int] | UpdatePlatformApyArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_platform_apy(string,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_platform_apy(string,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_user_tracking(
        self,
        args: tuple[str] | GetUserTrackingArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_user_tracking(address)(uint64,uint64,string,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_user_tracking(address)(uint64,uint64,string,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def calculate_rewards(
        self,
        args: tuple[str, int] | CalculateRewardsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the calculate_rewards(address,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "calculate_rewards(address,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_recommended_platform(
        self,
        args: tuple[str] | GetRecommendedPlatformArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_recommended_platform(address)string ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_recommended_platform(address)string",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class YieldRouterContractFactoryUpdateParams:
    """Parameters for 'update' operations of YieldRouterContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class YieldRouterContractFactoryDeleteParams:
    """Parameters for 'delete' operations of YieldRouterContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class YieldRouterContractFactoryCreateTransaction:
    """Create transactions for YieldRouterContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = YieldRouterContractFactoryCreateTransactionCreate(app_factory)


class YieldRouterContractFactoryCreateTransactionCreate:
    """Create new instances of YieldRouterContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class YieldRouterContractFactorySend:
    """Send calls to YieldRouterContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = YieldRouterContractFactorySendCreate(app_factory)


class YieldRouterContractFactorySendCreate:
    """Send create calls to YieldRouterContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[YieldRouterContractClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return YieldRouterContractClient(result[0]), result[1]


class YieldRouterContractComposer:
    """Composer for creating transaction groups for YieldRouterContract contract calls"""

    def __init__(self, client: "YieldRouterContractClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, str, int, int, str] | StakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YieldRouterContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.stake(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "stake(pay,address,address,uint64,uint64,string)void", v
            )
        )
        return self

    def unstake(
        self,
        args: tuple[str, int, int] | UnstakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YieldRouterContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.unstake(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "unstake(address,uint64,uint64)void", v
            )
        )
        return self

    def update_platform_apy(
        self,
        args: tuple[str, int] | UpdatePlatformApyArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YieldRouterContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_platform_apy(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_platform_apy(string,uint64)void", v
            )
        )
        return self

    def get_user_tracking(
        self,
        args: tuple[str] | GetUserTrackingArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YieldRouterContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_user_tracking(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_user_tracking(address)(uint64,uint64,string,uint64)", v
            )
        )
        return self

    def calculate_rewards(
        self,
        args: tuple[str, int] | CalculateRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YieldRouterContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.calculate_rewards(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "calculate_rewards(address,uint64)uint64", v
            )
        )
        return self

    def get_recommended_platform(
        self,
        args: tuple[str] | GetRecommendedPlatformArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "YieldRouterContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_recommended_platform(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_recommended_platform(address)string", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "YieldRouterContractComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "YieldRouterContractComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
