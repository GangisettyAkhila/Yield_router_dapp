/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"YieldRouterContract","structs":{},"methods":[{"name":"stake","args":[{"type":"pay","name":"payment"},{"type":"address","name":"contract_address"},{"type":"address","name":"for_account"},{"type":"uint64","name":"amount"},{"type":"uint64","name":"timestamp"},{"type":"string","name":"platform"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"unstake","args":[{"type":"address","name":"for_account"},{"type":"uint64","name":"amount"},{"type":"uint64","name":"timestamp"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"update_platform_apy","args":[{"type":"string","name":"platform"},{"type":"uint64","name":"apy"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_user_tracking","args":[{"type":"address","name":"for_account"}],"returns":{"type":"(uint64,uint64,string,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"calculate_rewards","args":[{"type":"address","name":"for_account"},{"type":"uint64","name":"current_time"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_recommended_platform","args":[{"type":"address","name":"for_account"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":3,"bytes":1}},"keys":{"global":{"platform_list":{"keyType":"AVMString","valueType":"(string,string,string,string)","key":"cGxhdGZvcm1fbGlzdA=="}},"local":{"staked_amount":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3Rha2VkX2FtdA=="},"staking_timestamp":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3Rha2VfdGltZQ=="},"last_platform":{"keyType":"AVMString","valueType":"AVMString","key":"cGxhdGZvcm0="},"total_stake_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3Rha2VfY291bnQ="}},"box":{}},"maps":{"global":{},"local":{},"box":{"platform_apys":{"keyType":"AVMString","valueType":"uint64","prefix":"YXB5Xw=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[374],"errorMessage":"Cannot unstake more than currently staked"},{"pc":[142],"errorMessage":"OnCompletion must be NoOp"},{"pc":[203],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[280],"errorMessage":"Payment amount must match stake amount"},{"pc":[272],"errorMessage":"Payment must go to contract"},{"pc":[283],"errorMessage":"Staking amount must be greater than zero"},{"pc":[359],"errorMessage":"Unstaking amount must be greater than zero"},{"pc":[612],"errorMessage":"check self.platform_list exists"},{"pc":[261,402],"errorMessage":"invalid number of bytes for (len+utf8[])"},{"pc":[237,246,346,355,413,521],"errorMessage":"invalid number of bytes for uint64"},{"pc":[221,229,338,432,513,598],"errorMessage":"invalid number of bytes for uint8[32]"},{"pc":[213],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAEgCCYICnN0YWtlZF9hbXQACnN0YWtlX3RpbWUIcGxhdGZvcm0Lc3Rha2VfY291bnQEYXB5XwQVH3x1DXBsYXRmb3JtX2xpc3QxGEAANCcHgC8ACAAPABgAIQAFQWxnbzUAB1RpbnltYW4AB01lc3NpbmEADEZvbGtzRmluYW5jZWcxG0EAOTEZFEQxGESCBgQGQv+QBF6yWd4Em+NTNQT566KLBLx22bsEXNQckzYaAI4GAAkAiADCAOYBNgGKADEZFDEYFBBDMRYjCUk4ECMSRDYaAUkVJBJENhoCSRUkEkQ2GgNJFSUSRBc2GgRJFSUSRBc2GgVJIlmBAghLARUSRFcCAEsFOAdPBRJETwQ4CEsDEkRLAkRLAyIoYyJOAk1PAwhLAyhPAmZLAipPA2ZLAStPAmZJIicEYyJOAk0jCCcETGYjQzYaAUkVJBJENhoCSRUlEkQXNhoDSRUlEkQXSwFESwIiKGMiTgJNSwJLAQ5ETwIJSwIoTwJmKkxmI0M2GgFJIlmBAghLARUSRFcCADYaAkkVJRJEFycFTwJQTBa/I0M2GgFJFSQSREkiKGMiTgJNSwEiKmMiTgJNSwIiK2MpTgJNTwMiJwRjIk4CTU8DFk8DFlBLAhUWVwYCTwNQTIACABpQTwIWUExQJwZMULAjQzYaAUcCFSQSRDYaAkkVJRJEF0wiKmMiTgJNSUAACSIWJwZMULAjQ0oJSwNJIihjIk4CTUwiK2MpTgJNJwVMUL5MFyJMTwJNCwuBgPCu55YJCkL/yyk2GgFHAhUkEkQiK2MpTgJNKSJJJwdlREkiWUsBgQJZSwJPAksCUlcCAE4CSwGBBFlLAk8CSwJSVwIATgJLAYEGWUsCTwJLAlJXAgBOAksBFVJXAgAiJwVLBUlOAlC+TBciTE8CTUxLCRJAAF1FCksIIicEYyJOAk2BCgtLCghJRQtLBg1BAAhLBEUHSwlFBkmNAwAnABwAEUsGSRUWVwYCTFAnBkxQsCNDgQNFAUsBRQVC/6GBAkUBSwJFBUL/liNFAUsDRQVC/4yBAgpFCkL/nQ==","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":2,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the YieldRouterContract contract
 */
export type YieldRouterContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'stake(pay,address,address,uint64,uint64,string)void': {
      payment: AppMethodCallTransactionArgument
      contractAddress: string
      forAccount: string
      amount: bigint | number
      timestamp: bigint | number
      platform: string
    }
    'unstake(address,uint64,uint64)void': {
      forAccount: string
      amount: bigint | number
      timestamp: bigint | number
    }
    'update_platform_apy(string,uint64)void': {
      platform: string
      apy: bigint | number
    }
    'get_user_tracking(address)(uint64,uint64,string,uint64)': {
      forAccount: string
    }
    'calculate_rewards(address,uint64)uint64': {
      forAccount: string
      currentTime: bigint | number
    }
    'get_recommended_platform(address)string': {
      forAccount: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'stake(pay,address,address,uint64,uint64,string)void': [payment: AppMethodCallTransactionArgument, contractAddress: string, forAccount: string, amount: bigint | number, timestamp: bigint | number, platform: string]
    'unstake(address,uint64,uint64)void': [forAccount: string, amount: bigint | number, timestamp: bigint | number]
    'update_platform_apy(string,uint64)void': [platform: string, apy: bigint | number]
    'get_user_tracking(address)(uint64,uint64,string,uint64)': [forAccount: string]
    'calculate_rewards(address,uint64)uint64': [forAccount: string, currentTime: bigint | number]
    'get_recommended_platform(address)string': [forAccount: string]
  }
}

/**
 * The return type for each method
 */
export type YieldRouterContractReturns = {
  'stake(pay,address,address,uint64,uint64,string)void': void
  'unstake(address,uint64,uint64)void': void
  'update_platform_apy(string,uint64)void': void
  'get_user_tracking(address)(uint64,uint64,string,uint64)': [bigint, bigint, string, bigint]
  'calculate_rewards(address,uint64)uint64': bigint
  'get_recommended_platform(address)string': string
}

/**
 * Defines the types of available calls and state of the YieldRouterContract smart contract.
 */
export type YieldRouterContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'stake(pay,address,address,uint64,uint64,string)void' | 'stake', {
      argsObj: YieldRouterContractArgs['obj']['stake(pay,address,address,uint64,uint64,string)void']
      argsTuple: YieldRouterContractArgs['tuple']['stake(pay,address,address,uint64,uint64,string)void']
      returns: YieldRouterContractReturns['stake(pay,address,address,uint64,uint64,string)void']
    }>
    & Record<'unstake(address,uint64,uint64)void' | 'unstake', {
      argsObj: YieldRouterContractArgs['obj']['unstake(address,uint64,uint64)void']
      argsTuple: YieldRouterContractArgs['tuple']['unstake(address,uint64,uint64)void']
      returns: YieldRouterContractReturns['unstake(address,uint64,uint64)void']
    }>
    & Record<'update_platform_apy(string,uint64)void' | 'update_platform_apy', {
      argsObj: YieldRouterContractArgs['obj']['update_platform_apy(string,uint64)void']
      argsTuple: YieldRouterContractArgs['tuple']['update_platform_apy(string,uint64)void']
      returns: YieldRouterContractReturns['update_platform_apy(string,uint64)void']
    }>
    & Record<'get_user_tracking(address)(uint64,uint64,string,uint64)' | 'get_user_tracking', {
      argsObj: YieldRouterContractArgs['obj']['get_user_tracking(address)(uint64,uint64,string,uint64)']
      argsTuple: YieldRouterContractArgs['tuple']['get_user_tracking(address)(uint64,uint64,string,uint64)']
      returns: YieldRouterContractReturns['get_user_tracking(address)(uint64,uint64,string,uint64)']
    }>
    & Record<'calculate_rewards(address,uint64)uint64' | 'calculate_rewards', {
      argsObj: YieldRouterContractArgs['obj']['calculate_rewards(address,uint64)uint64']
      argsTuple: YieldRouterContractArgs['tuple']['calculate_rewards(address,uint64)uint64']
      returns: YieldRouterContractReturns['calculate_rewards(address,uint64)uint64']
    }>
    & Record<'get_recommended_platform(address)string' | 'get_recommended_platform', {
      argsObj: YieldRouterContractArgs['obj']['get_recommended_platform(address)string']
      argsTuple: YieldRouterContractArgs['tuple']['get_recommended_platform(address)string']
      returns: YieldRouterContractReturns['get_recommended_platform(address)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        platformList: [string, string, string, string]
      }
      maps: {}
    }
    local: {
      keys: {
        stakedAmount: bigint
        stakingTimestamp: bigint
        lastPlatform: string
        totalStakeCount: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        platformApys: Map<string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type YieldRouterContractSignatures = keyof YieldRouterContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type YieldRouterContractNonVoidMethodSignatures = keyof YieldRouterContractTypes['methods'] extends infer T ? T extends keyof YieldRouterContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the YieldRouterContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends YieldRouterContractSignatures> = YieldRouterContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the YieldRouterContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends YieldRouterContractSignatures> = YieldRouterContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = YieldRouterContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = YieldRouterContractTypes['state']['local']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = YieldRouterContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type YieldRouterContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type YieldRouterContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: YieldRouterContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the YieldRouterContract smart contract
 */
export abstract class YieldRouterContractParamsFactory {
  /**
   * Constructs a no op call for the stake(pay,address,address,uint64,uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stake(params: CallParams<YieldRouterContractArgs['obj']['stake(pay,address,address,uint64,uint64,string)void'] | YieldRouterContractArgs['tuple']['stake(pay,address,address,uint64,uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stake(pay,address,address,uint64,uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.contractAddress, params.args.forAccount, params.args.amount, params.args.timestamp, params.args.platform],
    }
  }
  /**
   * Constructs a no op call for the unstake(address,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unstake(params: CallParams<YieldRouterContractArgs['obj']['unstake(address,uint64,uint64)void'] | YieldRouterContractArgs['tuple']['unstake(address,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unstake(address,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.forAccount, params.args.amount, params.args.timestamp],
    }
  }
  /**
   * Constructs a no op call for the update_platform_apy(string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePlatformApy(params: CallParams<YieldRouterContractArgs['obj']['update_platform_apy(string,uint64)void'] | YieldRouterContractArgs['tuple']['update_platform_apy(string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_platform_apy(string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.platform, params.args.apy],
    }
  }
  /**
   * Constructs a no op call for the get_user_tracking(address)(uint64,uint64,string,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserTracking(params: CallParams<YieldRouterContractArgs['obj']['get_user_tracking(address)(uint64,uint64,string,uint64)'] | YieldRouterContractArgs['tuple']['get_user_tracking(address)(uint64,uint64,string,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_user_tracking(address)(uint64,uint64,string,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.forAccount],
    }
  }
  /**
   * Constructs a no op call for the calculate_rewards(address,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateRewards(params: CallParams<YieldRouterContractArgs['obj']['calculate_rewards(address,uint64)uint64'] | YieldRouterContractArgs['tuple']['calculate_rewards(address,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculate_rewards(address,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.forAccount, params.args.currentTime],
    }
  }
  /**
   * Constructs a no op call for the get_recommended_platform(address)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getRecommendedPlatform(params: CallParams<YieldRouterContractArgs['obj']['get_recommended_platform(address)string'] | YieldRouterContractArgs['tuple']['get_recommended_platform(address)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_recommended_platform(address)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.forAccount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the YieldRouterContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class YieldRouterContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `YieldRouterContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new YieldRouterContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new YieldRouterContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the YieldRouterContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: YieldRouterContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new YieldRouterContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YieldRouterContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YieldRouterContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YieldRouterContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new YieldRouterContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the YieldRouterContract smart contract
 */
export class YieldRouterContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `YieldRouterContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the YieldRouterContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `YieldRouterContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends YieldRouterContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `YieldRouterContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<YieldRouterContractClient> {
    return new YieldRouterContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `YieldRouterContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<YieldRouterContractClient> {
    return new YieldRouterContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the YieldRouterContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `stake(pay,address,address,uint64,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stake: (params: CallParams<YieldRouterContractArgs['obj']['stake(pay,address,address,uint64,uint64,string)void'] | YieldRouterContractArgs['tuple']['stake(pay,address,address,uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldRouterContractParamsFactory.stake(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `unstake(address,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unstake: (params: CallParams<YieldRouterContractArgs['obj']['unstake(address,uint64,uint64)void'] | YieldRouterContractArgs['tuple']['unstake(address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldRouterContractParamsFactory.unstake(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `update_platform_apy(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePlatformApy: (params: CallParams<YieldRouterContractArgs['obj']['update_platform_apy(string,uint64)void'] | YieldRouterContractArgs['tuple']['update_platform_apy(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldRouterContractParamsFactory.updatePlatformApy(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `get_user_tracking(address)(uint64,uint64,string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserTracking: (params: CallParams<YieldRouterContractArgs['obj']['get_user_tracking(address)(uint64,uint64,string,uint64)'] | YieldRouterContractArgs['tuple']['get_user_tracking(address)(uint64,uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldRouterContractParamsFactory.getUserTracking(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `calculate_rewards(address,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateRewards: (params: CallParams<YieldRouterContractArgs['obj']['calculate_rewards(address,uint64)uint64'] | YieldRouterContractArgs['tuple']['calculate_rewards(address,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldRouterContractParamsFactory.calculateRewards(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `get_recommended_platform(address)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getRecommendedPlatform: (params: CallParams<YieldRouterContractArgs['obj']['get_recommended_platform(address)string'] | YieldRouterContractArgs['tuple']['get_recommended_platform(address)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YieldRouterContractParamsFactory.getRecommendedPlatform(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the YieldRouterContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `stake(pay,address,address,uint64,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stake: (params: CallParams<YieldRouterContractArgs['obj']['stake(pay,address,address,uint64,uint64,string)void'] | YieldRouterContractArgs['tuple']['stake(pay,address,address,uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldRouterContractParamsFactory.stake(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `unstake(address,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unstake: (params: CallParams<YieldRouterContractArgs['obj']['unstake(address,uint64,uint64)void'] | YieldRouterContractArgs['tuple']['unstake(address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldRouterContractParamsFactory.unstake(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `update_platform_apy(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePlatformApy: (params: CallParams<YieldRouterContractArgs['obj']['update_platform_apy(string,uint64)void'] | YieldRouterContractArgs['tuple']['update_platform_apy(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldRouterContractParamsFactory.updatePlatformApy(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `get_user_tracking(address)(uint64,uint64,string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserTracking: (params: CallParams<YieldRouterContractArgs['obj']['get_user_tracking(address)(uint64,uint64,string,uint64)'] | YieldRouterContractArgs['tuple']['get_user_tracking(address)(uint64,uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldRouterContractParamsFactory.getUserTracking(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `calculate_rewards(address,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateRewards: (params: CallParams<YieldRouterContractArgs['obj']['calculate_rewards(address,uint64)uint64'] | YieldRouterContractArgs['tuple']['calculate_rewards(address,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldRouterContractParamsFactory.calculateRewards(params))
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `get_recommended_platform(address)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getRecommendedPlatform: (params: CallParams<YieldRouterContractArgs['obj']['get_recommended_platform(address)string'] | YieldRouterContractArgs['tuple']['get_recommended_platform(address)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YieldRouterContractParamsFactory.getRecommendedPlatform(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the YieldRouterContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `stake(pay,address,address,uint64,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stake: async (params: CallParams<YieldRouterContractArgs['obj']['stake(pay,address,address,uint64,uint64,string)void'] | YieldRouterContractArgs['tuple']['stake(pay,address,address,uint64,uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldRouterContractParamsFactory.stake(params))
      return {...result, return: result.return as unknown as (undefined | YieldRouterContractReturns['stake(pay,address,address,uint64,uint64,string)void'])}
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `unstake(address,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unstake: async (params: CallParams<YieldRouterContractArgs['obj']['unstake(address,uint64,uint64)void'] | YieldRouterContractArgs['tuple']['unstake(address,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldRouterContractParamsFactory.unstake(params))
      return {...result, return: result.return as unknown as (undefined | YieldRouterContractReturns['unstake(address,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `update_platform_apy(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePlatformApy: async (params: CallParams<YieldRouterContractArgs['obj']['update_platform_apy(string,uint64)void'] | YieldRouterContractArgs['tuple']['update_platform_apy(string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldRouterContractParamsFactory.updatePlatformApy(params))
      return {...result, return: result.return as unknown as (undefined | YieldRouterContractReturns['update_platform_apy(string,uint64)void'])}
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `get_user_tracking(address)(uint64,uint64,string,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserTracking: async (params: CallParams<YieldRouterContractArgs['obj']['get_user_tracking(address)(uint64,uint64,string,uint64)'] | YieldRouterContractArgs['tuple']['get_user_tracking(address)(uint64,uint64,string,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldRouterContractParamsFactory.getUserTracking(params))
      return {...result, return: result.return as unknown as (undefined | YieldRouterContractReturns['get_user_tracking(address)(uint64,uint64,string,uint64)'])}
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `calculate_rewards(address,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateRewards: async (params: CallParams<YieldRouterContractArgs['obj']['calculate_rewards(address,uint64)uint64'] | YieldRouterContractArgs['tuple']['calculate_rewards(address,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldRouterContractParamsFactory.calculateRewards(params))
      return {...result, return: result.return as unknown as (undefined | YieldRouterContractReturns['calculate_rewards(address,uint64)uint64'])}
    },

    /**
     * Makes a call to the YieldRouterContract smart contract using the `get_recommended_platform(address)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getRecommendedPlatform: async (params: CallParams<YieldRouterContractArgs['obj']['get_recommended_platform(address)string'] | YieldRouterContractArgs['tuple']['get_recommended_platform(address)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YieldRouterContractParamsFactory.getRecommendedPlatform(params))
      return {...result, return: result.return as unknown as (undefined | YieldRouterContractReturns['get_recommended_platform(address)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new YieldRouterContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current YieldRouterContract app
   */
  state = {
    /**
     * Methods to access global state for the current YieldRouterContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          platformList: result.platform_list,
        }
      },
      /**
       * Get the current value of the platform_list key in global state
       */
      platformList: async (): Promise<[string, string, string, string] | undefined> => { return (await this.appClient.state.global.getValue("platform_list")) as [string, string, string, string] | undefined },
    },
    /**
     * Methods to access local state for the current YieldRouterContract app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            stakedAmount: result.staked_amount,
            stakingTimestamp: result.staking_timestamp,
            lastPlatform: result.last_platform,
            totalStakeCount: result.total_stake_count,
          }
        },
        /**
         * Get the current value of the staked_amount key in local state
         */
        stakedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("staked_amount")) as bigint | undefined },
        /**
         * Get the current value of the staking_timestamp key in local state
         */
        stakingTimestamp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("staking_timestamp")) as bigint | undefined },
        /**
         * Get the current value of the last_platform key in local state
         */
        lastPlatform: async (): Promise<string | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("last_platform")) as string | undefined },
        /**
         * Get the current value of the total_stake_count key in local state
         */
        totalStakeCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("total_stake_count")) as bigint | undefined },
      }
    },
    /**
     * Methods to access box state for the current YieldRouterContract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the platform_apys map in box state
       */
      platformApys: {
        /**
         * Get all current values of the platform_apys map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("platform_apys")) as Map<string, bigint> },
        /**
         * Get a current value of the platform_apys map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("platform_apys", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): YieldRouterContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a stake(pay,address,address,uint64,uint64,string)void method call against the YieldRouterContract contract
       */
      stake(params: CallParams<YieldRouterContractArgs['obj']['stake(pay,address,address,uint64,uint64,string)void'] | YieldRouterContractArgs['tuple']['stake(pay,address,address,uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unstake(address,uint64,uint64)void method call against the YieldRouterContract contract
       */
      unstake(params: CallParams<YieldRouterContractArgs['obj']['unstake(address,uint64,uint64)void'] | YieldRouterContractArgs['tuple']['unstake(address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unstake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_platform_apy(string,uint64)void method call against the YieldRouterContract contract
       */
      updatePlatformApy(params: CallParams<YieldRouterContractArgs['obj']['update_platform_apy(string,uint64)void'] | YieldRouterContractArgs['tuple']['update_platform_apy(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePlatformApy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_user_tracking(address)(uint64,uint64,string,uint64) method call against the YieldRouterContract contract
       */
      getUserTracking(params: CallParams<YieldRouterContractArgs['obj']['get_user_tracking(address)(uint64,uint64,string,uint64)'] | YieldRouterContractArgs['tuple']['get_user_tracking(address)(uint64,uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserTracking(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_user_tracking(address)(uint64,uint64,string,uint64)', v))
        return this
      },
      /**
       * Add a calculate_rewards(address,uint64)uint64 method call against the YieldRouterContract contract
       */
      calculateRewards(params: CallParams<YieldRouterContractArgs['obj']['calculate_rewards(address,uint64)uint64'] | YieldRouterContractArgs['tuple']['calculate_rewards(address,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculate_rewards(address,uint64)uint64', v))
        return this
      },
      /**
       * Add a get_recommended_platform(address)string method call against the YieldRouterContract contract
       */
      getRecommendedPlatform(params: CallParams<YieldRouterContractArgs['obj']['get_recommended_platform(address)string'] | YieldRouterContractArgs['tuple']['get_recommended_platform(address)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getRecommendedPlatform(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_recommended_platform(address)string', v))
        return this
      },
      /**
       * Add a clear state call to the YieldRouterContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as YieldRouterContractComposer
  }
}
export type YieldRouterContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the stake(pay,address,address,uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(params?: CallParams<YieldRouterContractArgs['obj']['stake(pay,address,address,uint64,uint64,string)void'] | YieldRouterContractArgs['tuple']['stake(pay,address,address,uint64,uint64,string)void']>): YieldRouterContractComposer<[...TReturns, YieldRouterContractReturns['stake(pay,address,address,uint64,uint64,string)void'] | undefined]>

  /**
   * Calls the unstake(address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstake(params?: CallParams<YieldRouterContractArgs['obj']['unstake(address,uint64,uint64)void'] | YieldRouterContractArgs['tuple']['unstake(address,uint64,uint64)void']>): YieldRouterContractComposer<[...TReturns, YieldRouterContractReturns['unstake(address,uint64,uint64)void'] | undefined]>

  /**
   * Calls the update_platform_apy(string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePlatformApy(params?: CallParams<YieldRouterContractArgs['obj']['update_platform_apy(string,uint64)void'] | YieldRouterContractArgs['tuple']['update_platform_apy(string,uint64)void']>): YieldRouterContractComposer<[...TReturns, YieldRouterContractReturns['update_platform_apy(string,uint64)void'] | undefined]>

  /**
   * Calls the get_user_tracking(address)(uint64,uint64,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserTracking(params?: CallParams<YieldRouterContractArgs['obj']['get_user_tracking(address)(uint64,uint64,string,uint64)'] | YieldRouterContractArgs['tuple']['get_user_tracking(address)(uint64,uint64,string,uint64)']>): YieldRouterContractComposer<[...TReturns, YieldRouterContractReturns['get_user_tracking(address)(uint64,uint64,string,uint64)'] | undefined]>

  /**
   * Calls the calculate_rewards(address,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateRewards(params?: CallParams<YieldRouterContractArgs['obj']['calculate_rewards(address,uint64)uint64'] | YieldRouterContractArgs['tuple']['calculate_rewards(address,uint64)uint64']>): YieldRouterContractComposer<[...TReturns, YieldRouterContractReturns['calculate_rewards(address,uint64)uint64'] | undefined]>

  /**
   * Calls the get_recommended_platform(address)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRecommendedPlatform(params?: CallParams<YieldRouterContractArgs['obj']['get_recommended_platform(address)string'] | YieldRouterContractArgs['tuple']['get_recommended_platform(address)string']>): YieldRouterContractComposer<[...TReturns, YieldRouterContractReturns['get_recommended_platform(address)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the YieldRouterContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): YieldRouterContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): YieldRouterContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<YieldRouterContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<YieldRouterContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<YieldRouterContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<YieldRouterContractComposerResults<TReturns>>
}
export type YieldRouterContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

